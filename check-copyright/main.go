// Copyright (C) 2019 Storj Labs, Inc.
// See LICENSE for copying information.

package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

var checkFiles = map[string]bool{
	".go":  true,
	".ts":  true,
	".js":  true,
	".vue": true,
}

func main() {
	cmd := exec.Command("git", "ls-files")
	out, err := cmd.Output()
	if err != nil {
		fmt.Fprintf(os.Stderr, "running \"git ls-files\" failed:\n")
		fmt.Fprintf(os.Stderr, "\t%v\n", err)
		os.Exit(1)
	}

	var failed int
	committedFiles := strings.Split(string(out), "\n")
	for _, path := range committedFiles {
		if path == "" {
			continue
		}

		if !checkFiles[filepath.Ext(path)] {
			continue
		}

		err := checkCopyright(path)
		if err != nil {
			failed++
			fmt.Fprintf(os.Stderr, "%v\n", err)
		}
	}

	if failed > 0 {
		os.Exit(1)
	}
}

func checkCopyright(path string) error {
	file, err := os.Open(path)
	if err != nil {
		return fmt.Errorf("failed to read %v: %w", path, err)
	}
	defer func() { _ = file.Close() }()

	var header [256]byte
	n, err := file.Read(header[:])
	if errors.Is(err, io.EOF) {
		err = nil
	}
	if err != nil {
		return fmt.Errorf("failed to read %v: %w", path, err)
	}

	isGenerated := bytes.Contains(header[:n], []byte(`AUTOGENERATED`)) ||
		bytes.Contains(header[:n], []byte(`Code generated`)) ||
		bytes.Contains(header[:n], []byte(`Autogenerated`))
	if isGenerated {
		return nil
	}

	if bytes.Contains(header[:n], []byte(`Copyright `)) {
		return nil
	}
	return fmt.Errorf("missing copyright %v: %w", path, err)
}
